from pydantic import ConfigDict
from sqlmodel import Column
from sqlmodel import Field
from sqlmodel import SQLModel
from sqlmodel import TIMESTAMP


class HiredEmployee(SQLModel, table=True):
    """
    hired_employees.csv:
        id INTEGER Id of the employee
        name STRING Name and surname of the employee
        datetime STRING Hire datetime in ISO format
        department_id INTEGER Id of the department which the employee was hired for
        job_id INTEGER Id of the job which the employee was hired for
    """

    # To allow TIMESTAMP as a valid type
    # Check: https://docs.pydantic.dev/latest/api/config/#pydantic.config.ConfigDict.arbitrary_types_allowed
    model_config = ConfigDict(arbitrary_types_allowed=True)

    # Although id is a primary_key and it is supposed not to be null,
    # in SQLModel we define it as
    #
    #   int | None  with its default value as Field(default=None, primary_key=True)
    #
    # so that whenever we create an instance of this class (in the next chapters),
    # we will not set the id, to let the id to be generated by the database,
    # not by our code (remember that the id will is required in the database).
    id: int | None = Field(default=None, primary_key=True)
    name: str | None = None
    datetime: TIMESTAMP | None = Field(
        default=None, sa_column=Column(TIMESTAMP(timezone=True), nullable=True)
    )
    department_id: int | None = Field(default=None, foreign_key="department.id")
    job_id: int | None = Field(default=None, foreign_key="job.id")


class Department(SQLModel, table=True):
    """
    A Table with the following columns:

        id (int): Id of the department
        department (str): Name of the department
    """

    id: int | None = Field(default=None, primary_key=True)
    department: str


class Job(SQLModel, table=True):
    """
    A Table with the following columns:

        id (int): Id of the job
        job (str): Name of the job
    """

    id: int | None = Field(default=None, primary_key=True)
    job: str
